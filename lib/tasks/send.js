/**
 * This file is part of the TREZOR project.
 *
 * Copyright (C) 2015 SatoshiLabs <info@satoshilabs.com>
 *           (C) 2014 Mike Tsao <mike@sowbug.com>
 *           (C) 2015 William Wolf <throughnothing@gmail.com>
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

'use strict';

/**
 * Logic of sending data to trezor
 *
 * Logic of "call" is broken to two parts - sending and recieving
 */

var Promise = require('promise');
var hid = require('../chrome/hid');
var constants = require('../../constants.js');
var ByteBuffer = require('protobufjs').ByteBuffer;


/**
 * Sends more buffers to device.
 * @param {integer} id ConnectionId of Trezor (returned by chrome.hid.connect)
 * @param {Array.<ArrayBuffer>} buffers Raw data to push to trezor.
 * @returns {Promise} Resolves iff everything gets sent
 */
function sendBuffers(id, buffers) {

  return buffers.reduce(function (prevPromise, buffer) {
    return prevPromise.then(function () {
      return hid.send(id, buffer)
    })
  }, Promise.resolve());

}

/**
 * Builds Protobuf message from name and data
 * @param {Object.<string, ProtoBuf.Builder.Message>} messages Builders, generated by reading config
 * @param {string} name Name of the message
 * @param {Object} data Data to serialize, exactly as given by trezor.js
 * @returns {Object} d
 * @returns {ProtoBuf.Builder.Message} d.message The given message
 * @returns {int} d.type Message type number
 */
function buildMessage(messages, name, data) {

  var Builder = messages[name];
  if (Builder == null) {
    throw new Error("The message name " + name + " is not found.");
  }

  cleanupInput(data);

  var message;
  if (data) {
    message = new Builder(data);
  } else {
    message = new Builder();
  }
  var type = messages.MessageType['MessageType_' + name];

  return {
    message: message,
    type: type
  };
}

function cleanupInput(message) {
  delete message.$$hashKey;

  for (var key in message) {

    var value = message[key];
    if (Array.isArray(value)) {
      value.forEach(function (i) {
        if (typeof i === "object") {
          cleanupInput(i);
        }
      });
    }
    if (typeof value === "object") {
      cleanupInput(value);
    }

  }
}


/**
 * Encodes the message
 * @param {Object} message object with info
 * @param {ProtoBuf.Builder.Message} message.message Protobuf's message
 * @param {int} message.type Message type number
 * @returns {Uint8Array} Raw bytes that will be sent
 */
function encodeMessage(message) {
  var headerSize = constants.HEADER_SIZE; // should be 8
  var bytes = new Uint8Array(message.message.encodeAB());
  var fullSize = headerSize + bytes.length;

  var encodedByteBuffer = new ByteBuffer(fullSize);

  // first encode header

  // 2*1 byte
  encodedByteBuffer.writeByte(constants.MESSAGE_HEADER_BYTE);
  encodedByteBuffer.writeByte(constants.MESSAGE_HEADER_BYTE);

  // 2 bytes
  encodedByteBuffer.writeUint16(message.type);

  // 4 bytes (so 8 in total)
  encodedByteBuffer.writeUint32(bytes.length);

  // then put in the actual message

  encodedByteBuffer.append(bytes);

  // and convert to uint8 array
  // (it can still be too long though)
  var encoded = new Uint8Array(encodedByteBuffer.buffer);

  return encoded;
}

/**
 * Splits the buffer into 63-byte-long buffers
 *
 * Maybe it can be done more elegantly?
 * @param {Uint8Array} bytes Bytes
 * @returns {Array.<Uint8Array>} Buffers that will be sent to Trezor
 */
function splitEncoded(bytes) {
  var result = [];
  var size = constants.BUFFER_SIZE;

  // How many pieces will there actually be
  var count = Math.round((bytes.length - 1) / size) + 1;

  // slice and dice 
  for (var i = 0; i < count; i++) {
    var slice = bytes.subarray(i * size, (i + 1) * size);
    var newArray = new Uint8Array(size);
    newArray.set(slice);
    result.push(newArray.buffer);
  }

  return result;
}

/**
 * Builds buffers to send.
 * @param {Object.<string, ProtoBuf.Builder.Message>} messages Builders, generated by reading config
 * @param {string} name Name of the message
 * @param {Object} data Data to serialize, exactly as given by trezor.js
 * @returns {Array.<Uint8Array>} Buffers that will be sent to Trezor
 */
function buildBuffers(messages, name, data) {
  var message = buildMessage(messages, name, data);
  var encoded = encodeMessage(message);
  var split = splitEncoded(encoded);
  return split;
}

/**
 * Sends message to device.
 * @param {Object.<string, ProtoBuf.Builder.Message>} messages Builders, generated by reading config
 * @param {integer} id ConnectionId of Trezor (returned by chrome.hid.connect)
 * @param {string} name Name of the message
 * @param {Object} data Data to serialize, exactly as given by trezor.js
 * @returns {Promise} Resolves iff everything gets sent
 */
function send(messages, id, name, data) {
  var buffers = buildBuffers(messages, name, data);
  return sendBuffers(id, buffers);
}

module.exports = send;
