/* @flow */
/**
 * This file is part of the TREZOR project.
 *
 * Copyright (C) 2015 SatoshiLabs <info@satoshilabs.com>
 *           (C) 2014 Mike Tsao <mike@sowbug.com>
 *           (C) 2014 Liz Fong-Jones <lizf@google.com>
 *           (C) 2015 William Wolf <throughnothing@gmail.com>
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

'use strict';

/**
 * Helper module for converting Trezor's raw input to
 * ProtoBuf's message and from there to regular JSON to trezor.js
 */

import * as ProtoBuf from "protobufjs";
import {ByteBuffer, Long} from "protobufjs";
import * as _ from "lodash";

import {Messages} from "./messages.js";

export class MessageDecoder {
  // Builders, generated by reading config
  messages: Messages;
  // message type number
  type: number;
  // raw data to push to Trezor
  data: ArrayBuffer;

  constructor(messages: Messages, type: number, data: ArrayBuffer) {
    this.type = type;
    this.data = data;
    this.messages = messages;
  }

  // Returns an info about this message,
  // which includes the constructor object and a name
  _messageInfo() : MessageInfo {
    var r = this.messages.messagesByType[this.type];
    if (r == null) {
      throw new Error("Method type not found", this.type);
    }
    return new MessageInfo(r.constructor, r.name);
  }

  // Returns the name of the message
  messageName() : string {
    return this._messageInfo().name;
  }
 
  // Returns the actual decoded message, as a ProtoBuf.js object
  _decodedMessage() : ProtoBuf.Builder.Message {
    var constructor = this._messageInfo().messageConstructor;
    return constructor.decode(this.data);
  }

  // Returns the message decoded to JSON, that could be handed back
  // to trezor.js
  decodedJSON() : Object {
    var decoded = this._decodedMessage();
    var converted = messageToJSON(decoded);

    return JSON.parse(JSON.stringify(converted));
  }
}

class MessageInfo {
  messageConstructor: ProtoBuf.Builder.Message;
  name: string;
  constructor(messageConstructor: ProtoBuf.Builder.Message, name: string) {
    this.messageConstructor = messageConstructor;
    this.name = name;
  }
}


/**
 * Converts any ProtoBuf message to JSON in Trezor.js-friendly format
 * @param {ProtoBuf.Builder.Message} message Message to convert
 * @returns {Object} JSON
 */
function messageToJSON(message: ProtoBuf.Builder.Message) : Object {
  var PB = ProtoBuf;
  var res = {};
  var meta = message.$type;


  for (var key in message) {

    var value = message[key];
    if (typeof value === "function") {
      //ignoring
    } else if (value instanceof ByteBuffer) {
      var hex = value.toHex();
      res[key] = hex;
    } else if (value instanceof Long) {
      var num = value.toNumber();
      res[key] = num;
    } else if (Array.isArray(value)) {
      var decodedArr = value.map(function (i) {
        if (typeof i === "object") {
          return messageToJSON(i);
        } else {
          return i;
        }
      });
      res[key] = decodedArr;
    } else if (value instanceof ProtoBuf.Builder.Message) {
      res[key] = messageToJSON(value);
    } else if (meta._fieldsByName[key].type.name === "enum") {

      var enumValues = meta._fieldsByName[key].resolvedType.getChildren();
      res[key] = _.find(enumValues, {
        id: value
      }).name;

    } else {
      res[key] = value;
    }
  }
  return res;
}

