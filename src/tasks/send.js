/* @flow */
/**
 * This file is part of the TREZOR project.
 *
 * Copyright (C) 2015 SatoshiLabs <info@satoshilabs.com>
 *           (C) 2014 Mike Tsao <mike@sowbug.com>
 *           (C) 2014 Liz Fong-Jones <lizf@google.com>
 *           (C) 2015 William Wolf <throughnothing@gmail.com>
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

// Logic of sending data to trezor
//
// Logic of "call" is broken to two parts - sending and recieving

import * as hid from "../chrome/hid";
import * as constants from "../constants.js";
import * as connections from "./connections";
import * as ProtoBuf from "protobufjs";
import {ByteBuffer} from "protobufjs";
import type {Messages} from "../protobuf/messages.js";

// Sends more buffers to device.
function sendBuffers(id: number, buffers: Array<ArrayBuffer>): Promise<void> {
  const hasReportId: boolean = connections.hasReportId(id);

  return buffers.reduce((prevPromise: Promise<void>, buffer: ArrayBuffer) => {
    return prevPromise.then(() => {
      return hid.send(id, buffer, hasReportId);
    });
  }, Promise.resolve(undefined));
}

// already built PB message
class BuiltMessage {
  message: ProtoBuf.Builder.Message;
  type: number;

  constructor(messages: Messages, // Builders, generated by reading config
    name: string, // Name of the message
    data: Object // data as "pure" object, from trezor.js
  ) {
    const Builder = messages.messagesByName[name];
    if (Builder == null) {
      throw new Error("The message name " + name + " is not found.");
    }

    // cleans up stuff from angular and remove "null" that crashes in builder
    cleanupInput(data);

    if (data) {
      this.message = new Builder(data);
    } else {
      this.message = new Builder();
    }

    this.type = messages.messageTypes["MessageType_" + name];
  }

  // encodes into "raw" data, but it can be too long and needs to be split into
  // smaller buffers
  _encodeLong(): Uint8Array {
    const headerSize: number = constants.HEADER_SIZE; // should be 8
    const bytes: Uint8Array = new Uint8Array(this.message.encodeAB());
    const fullSize: number = headerSize + bytes.length;

    const encodedByteBuffer = new ByteBuffer(fullSize);

    // first encode header

    // 2*1 byte
    encodedByteBuffer.writeByte(constants.MESSAGE_HEADER_BYTE);
    encodedByteBuffer.writeByte(constants.MESSAGE_HEADER_BYTE);

    // 2 bytes
    encodedByteBuffer.writeUint16(this.type);

    // 4 bytes (so 8 in total)
    encodedByteBuffer.writeUint32(bytes.length);

    // then put in the actual message
    encodedByteBuffer.append(bytes);

    // and convert to uint8 array
    // (it can still be too long to send though)
    const encoded: Uint8Array = new Uint8Array(encodedByteBuffer.buffer);

    return encoded;
  }

  // encodes itself and splits into "nice" chunks
  encode(): Array<ArrayBuffer> {
    const bytes: Uint8Array = this._encodeLong();

    const result: Array<ArrayBuffer> = [];
    const size: number = constants.BUFFER_SIZE;

    // How many pieces will there actually be
    const count: number = Math.floor((bytes.length - 1) / size) + 1;

    // slice and dice
    for (let i = 0; i < count; i++) {
      const slice: Uint8Array = bytes.subarray(i * size, (i + 1) * size);
      const newArray: Uint8Array = new Uint8Array(size);
      newArray.set(slice);
      result.push(newArray.buffer);
    }

    return result;
  }
}

// Removes $$hashkey from angular and remove nulls
function cleanupInput(message: Object): void {
  delete message.$$hashKey;

  for (const key in message) {
    const value = message[key];
    if (value == null) {
      delete message[key];
    } else {
      if (Array.isArray(value)) {
        value.forEach((i) => {
          if (typeof i === "object") {
            cleanupInput(i);
          }
        });
      }
      if (typeof value === "object") {
        cleanupInput(value);
      }
    }
  }
}

// Builds buffers to send.
// messages: Builders, generated by reading config
// name: Name of the message
// data: Data to serialize, exactly as given by trezor.js
// Returning buffers that will be sent to Trezor
function buildBuffers(messages: Messages, name: string, data: Object): Array<ArrayBuffer> {
  const message: BuiltMessage = new BuiltMessage(messages, name, data);
  const encoded: Array<ArrayBuffer> = message.encode();
  return encoded;
}

// Sends message to device.
// Resolves iff everything gets sent
export function send(messages: Messages, id: number, name: string, data: Object): Promise<void> {
  const buffers: Array<ArrayBuffer> = buildBuffers(messages, name, data);
  return sendBuffers(id, buffers);
}
