/* @flow */
/**
 * This file is part of the TREZOR project.
 *
 * Copyright (C) 2015 SatoshiLabs <info@satoshilabs.com>
 *           (C) 2014 Mike Tsao <mike@sowbug.com>
 *           (C) 2014 Liz Fong-Jones <lizf@google.com>
 *           (C) 2015 William Wolf <throughnothing@gmail.com>
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

"use strict";

// Logic of recieving data from trezor
// Logic of "call" is broken to two parts - sending and recieving

import * as hid from "../chrome/hid";
import * as constants from "../constants.js";
import {MessageDecoder} from "../protobuf/message_decoder.js";
import {ByteBuffer} from "protobufjs";
import type {Messages} from "../protobuf/messages.js";

type MessageFromTrezor = {type: string, message: Object};

// input that might or might not be fully parsed yet
class PartiallyParsedInput {
  // Message type number
  typeNumber: number;
  // Expected length of the raq message, in bytes
  expectedLength: number;
  // Buffer with the beginning of message; can be non-complete and WILL be modified
  // during the object's lifetime
  buffer: ByteBuffer;
  constructor(typeNumber: number, length: number) {
    this.typeNumber = typeNumber;
    this.expectedLength = length;
    this.buffer = new ByteBuffer(length);
  }
  isDone(): boolean {
    return (this.buffer.offset >= this.expectedLength);
  }
  append(buffer: ByteBuffer):void {
    this.buffer.append(buffer);
  }
  arrayBuffer(): ArrayBuffer {
    const byteBuffer: ByteBuffer = this.buffer;
    byteBuffer.reset();
    return byteBuffer.toArrayBuffer();
  }
}

/**
 * Parses first raw input that comes from Trezor and returns some information about the whole message.
 *
 * Throws error if something's wrong
 * @param {Uint8Array} bytes Bytes from Trezor
 */
function parseFirstInput(bytes: ArrayBuffer): PartiallyParsedInput {
  // convert to ByteBuffer so it's easier to read
  const byteBuffer: ByteBuffer = ByteBuffer.concat([bytes]);

  // checking first two bytes
  const sharp1: number = byteBuffer.readByte();
  const sharp2: number = byteBuffer.readByte();
  if (sharp1 !== constants.MESSAGE_HEADER_BYTE || sharp2 !== constants.MESSAGE_HEADER_BYTE) {
    throw new Error("Didn't receive expected header signature.");
  }

  // reading things from header
  const type: number = byteBuffer.readUint16();
  const length: number = byteBuffer.readUint32();

  // creating a new buffer with the right size
  const res: PartiallyParsedInput = new PartiallyParsedInput(type, length);
  res.append(byteBuffer);
  return res;
}

// If the whole message wasn't loaded in the first input, loads more inputs until everything is loaded.
// note: the return value is not at all important since it's still the same parsedinput
function receiveRest(parsedInput: PartiallyParsedInput, id: number): Promise<void> {
  if (parsedInput.isDone()) {
    return Promise.resolve(undefined); // flow bug
  }

  return hid.receive(id).then((data) => {
    // sanity check
    if (data == null) {
      throw new Error("Received no data.");
    }

    parsedInput.append(data);
    return receiveRest(parsedInput, id);
  });
}

/**
 * Receives the whole message as a raw data buffer (but without headers or type info)
 * @param {integer} id ConnectionId of Trezor (returned by chrome.hid.connect)
 * @returns {Promise.<Object>} d
 * @returns {ArrayBuffer} d.buffer The message as a buffer
 * @returns {int} d.type Message type number
 */
function receiveBuffer(id: number): Promise<PartiallyParsedInput> {
  return hid.receive(id).then((data: ArrayBuffer) => {
    const partialInput: PartiallyParsedInput = parseFirstInput(data);

    return receiveRest(partialInput, id).then(() => {
      return partialInput;
    });
  });
}

/**
 * Reads data from device and returns decoded message, that can be sent back to trezor.js
 * @param {Object.<string, ProtoBuf.Builder.Message>} messages Builders, generated by reading config
 * @param {integer} id ConnectionId of Trezor (returned by chrome.hid.connect)
 * @returns {Promise.<Object>} res Promise with object that can get directly send to trezor.js
 * @returns {Object} res.message Message as JSON
 * @returns {string} res.type Message name
 */
export function receive(messages: Messages, id: number): Promise<MessageFromTrezor> {
  return receiveBuffer(id).then((received) => {
    const typeId: number = received.typeNumber;
    const buffer: ArrayBuffer = received.arrayBuffer();
    const decoder: MessageDecoder = new MessageDecoder(messages, typeId, buffer);
    return {
      message: decoder.decodedJSON(),
      type: decoder.messageName(),
    };
  });
}
