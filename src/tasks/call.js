/* @flow */
/**
 * This file is part of the TREZOR project.
 *
 * Copyright (C) 2015 SatoshiLabs <info@satoshilabs.com>
 *           (C) 2014 Mike Tsao <mike@sowbug.com>
 *           (C) 2014 Liz Fong-Jones <lizf@google.com>
 *           (C) 2015 William Wolf <throughnothing@gmail.com>
 *
 * This library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library.  If not, see <http://www.gnu.org/licenses/>.
 */

'use strict';
import {send} from "./send";
import {receive} from "./receive";
import {getDevice, release} from "./connections";
import {stopEnumeratingDevice} from "./enumerate";

import {udevStatus, clearUdevError, catchUdevError} from "./udevStatus";
import * as storage from "../chrome/storage";
import type {Messages} from "../protobuf/messages.js";

type MessageToTrezor = {id: ?number, type: ?string, message: Object};
type MessageFromTrezor = {type: string, message: Object};


/**
 * Sends a message to Trezor and returns
 * an encoded message.
 * @param {Object} message Message from Trezor.js
 * @param {Object.<string, ProtoBuf.Builder.Message>} messages Builders, generated by reading config
 * @returns {Promise.<Object>} res Promise with object that can get directly send to trezor.js
 * @returns {Object} res.message Message as JSON
 * @returns {string} res.type Message name
 */
export function call(message:MessageToTrezor, messages:Messages): Promise<MessageFromTrezor> {
  if (message.id == null) {
    throw new Error("Connection id is not defined.");
  }
  if (message.type == null) {
    throw new Error("Type is not defined");
  }
  // body can probably be null 

  var id: number = message.id;
  var type: string = message.type;
  var body: Object = message.message;
  
    return send(messages, id, type, body).then(function () {

      return receive(messages, id).then(function (response) {

        // after first back and forth, it's clear that udev is installed => afterInstall is false, error is false
        return storage.set("afterInstall", "false").then(function() {
          clearUdevError();
            
          return response;
        });

      });
    }).catch(function (error) {
        
      var errMessage = error;
      if (errMessage.message !== undefined) {
        errMessage = errMessage.message;
      }
        
      if (errMessage === "Transfer failed.") {
        
        var device = getDevice(id);
        
        if (process.env.NODE_ENV === "debug") {
          console.log("Detected dead TREZOR.", id, device);
        }
        
        if (device != null) {
          stopEnumeratingDevice(device);
        }
        release(id);
      }
        
      if (message.type === "Initialize") {
        return catchUdevError(error);
      } else {
        return Promise.reject(error);
      }
    });
}


